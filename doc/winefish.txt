<HTML>
<!--
%
% $Id$
% Winefish Documentation
% Format: KTML
% Convert: k2h winefish.txt > winefish.html
%
-->
<HEAD>
<TITLE>Winefish Documentation</TITLE>
<STYLE>
<!--
body { margin: 30px; font-size: 13px; margin-right: 100px; }
b { font-weight: normal; color: navy; font-family: monospace; }
pre {color: olive; }
a, a:visited, a:hover { text-decoration: none; }
a:hover { color: yellow; background-color: black; }
a:visited { color: green; }
->
</STYLE>
</HEAD>
<BODY>
1(@[Winefish Documentation](http://winefish.berlios.de/))

L(
* Author: kyanh <@(kyanh_at_viettug_dot_org)>
* This document is available for Winefish version RED(1.3.2.6f) or higher.
* RED(If you've used an older version of Winefish, you must read @[IMPORTANT NOTES](#IMPORTANT NOTES) )
* If you want to make Winefish's package, please read @[CONFIGURE](#CONFIGURE) section
* My English is not well so you may confuse :\)\)
* For further help, visit @(http://winefish.berlios.de/forum/)
)

2(#(CONTENTS))

L(
* @[Features](#FEATURES)
* @[Installation](#INSTALLATION)
* @[Important Notes](#IMPORTANT NOTES)
* @[Input Method](#INPUT METHOD)
* Hotkeys: @[editing](#HOTKEYS: EDITING)
* Hotkeys: @[compiling](#HOTKEYS: COMPILING)
* @[Project Mode](#PROJECT MODE)
* @[Document Structure](#DOCUMENT STRUCTURE)
* @[Autotext](#AUTOTEXT)
* @[Auto completion](#AUTO_COMPLETION)
* @[Commandline Options](#COMMANDLINE OPTIONS)
* @[Outputbox](#OUTPUTBOX)
* @[Templates Support](#TEMPLATES SUPPORT)
* @[Brace Finder](#BRACE FINDER)
* @[TIPS](#TIPS)
* @[Locale Support](#LOCALE SUPPORT)
* @[Configure](#CONFIGURE)
)

2(#(FEATURES))

L(
* @[autotext](#AUTOTEXT)
* @[autocompletion](#AUTO_COMPLETION)
* @[command collector](#AUTO_COMPLETION)
* multiple encoding
* configurable external tools
* configurable highlight support
* @[templates support](#TEMPLATES SUPPORT)
)

2(#(INSTALLATION))

Read INSTALL

2(#(INPUT METHOD))

Input Method is not a function of Winefish.

Right click on the document. In the context menu,
goto B(Input Methods) and choose your favorite
input method. These various methods are selected from your
system, not provided by Winefish.

2(#(IMPORTANT NOTES))

If you've used an older version of Winefish, you must reconfigure Winefish
(\(use B(Preferences Pages).\)
Please take care of following properties:
L(
* Editor / Highlighting Syntax by Default
* Files / Create Backup On Save
* Users Interface / \*
* TeXbox / Save, Show
* Miscellaneous / Templates Directory
)

2(#(HOTKEYS: EDITING))

L(
* Start "autocompletion": B(control + Space)
* Start "autotext": B(shift + Space)
* Update syntax highlighting: B(meta + Space)
* Go to a line: B(control + /)
* Start a numbered section: B(control + {0,1,2,3,4,5,6})
* Start an unnumbered section: B(control + meta + {0,1,2,3,4})
* Insert an image: B(control + I)
* Insert a table or array: B(control + T)
* Insert a list: B(control + L)
* Insert `verbatim': B(shift + control + V), B(shift + control + meta + V)
* \(Un\)comment selected text: B(control + \%), B(control + meta + \%)
* Increase/Decrease Indent: B(control + ,) / B(control + .)
* Insert source separator: B(control + =)
* Delete the first char of each line in the selected text: B(control + <)
* Delete current line: B(control + K)
* Templates manager: B(control + meta + shift + F)
* Advanced Find in Files: B(control + meta + F)
* Brace Finder: B(control + ]), B(control + [)
)

2(#(HOTKEYS: COMPILING))

By default, Winefish requires LaTeX, xdvi and xpdf.
You may changes these from B(Preferences) Page.
L(
* Convert to DVI format: B(F1)
* View DVI document \(with DVI SYNC\): B(control + F1)
* Convert to PDF: B(F2)
* View PDF document: B(control + F2)
* Stop running tools: B(Escape)
)

If you are working in project mode, by default, the above tools
will start in the base directory and file of the project.

If you want to compile the current document, B(NOT) the
base document of project, you may use B(control + ESC)
to turn project mode ON/OFF, *OR* select menu B(External/Project Mode)

2(#(PROJECT MODE))

L(
* Each project requires a U(GREEN((base directory)) and a U(GREEN((base file))
* The "base file" RED(must be located) in "base directory"
* Project's files should be located in "base directory"
)

2(#(DOCUMENT STRUCTURE))

In order to get the document structure, you may try this:
L(
* Press B(control + F) to start the search engine
* Type B(exactly) the following string
PRE(^\BACKSLASH\BACKSLASH\(sub\){0,2}section.\*?$)
* Select PERL type as type \(regular expression\)
* Select Bookmark Results
* Press OK.
)

2(#(AUTOTEXT))

If B($HOME/.winefish/autotext) wasnot modified,
you may try to open a new document, type the string
B(/tsta) then press B(shift + Space). Other tests are B(/tstd),
B(/tstc) and B(/tstd).

You may modify the file B($HOME/.winefish/autotext)
RED(Do not open it in Winefish as Winefish will override your modification when exiting.)
The contents are similar to
PRE(
att: /tsta:\BACKSLASH\BACKSLASHbegin{foo\n:\n\BACKSLASH\end{foo:
att: /tstb:\BACKSLASH\BACKSLASHbegin{this-is-b\n:\n\BACKSLASH\end{this-is-b:
att: /tstc:\BACKSLASH\BACKSLASHtestofsomething::
att: /tstd:: Can you see?:
)
Each line is of the from PRE(att: /foo:begin:end:)
where B(/foo) is the new defintion which B(must be started) by a slash /.
The string begin will be inserted before the cursor,
the string end will be inserted after the cursor.

Here are some rules:
L(
* Length of /foo should be at most AUTOTEXT_MAX_LENGTH
\(this constant is defined in B(src/config.h.in)\)
* one of the two strings `begin' and `end' is not NULL.
* If foo is defined twice or more, for e.g.,
* only the first one is used.
* RED(U(some special characters must be escaped:))
L(
	* \n for the new line
	* \t for a tab
	* \: for a colon
	* \BACKSLASH\BACKSLASH for the backslash
)
* You must restart Winefish after modifying.
)

2(#(AUTO_COMPLETION))

Press B(control + Space) to start autocompletion.
You may delete a word from popup menu (press B(Delete)),
or from B(Preferences) page.

The words are saved in B($HOME/.winefish/words).
RED(Do not open the file in Winefish as the contents will be overridden when Winefish exists.)

When you're typing, Winefish collects LaTeX commands and add them to
list of known words. If there's a bad command, you may `B(delete)'
it directly from PopUp menu.

A command will be added to completion list if its length is:
L(* greater than 2*less than or equal COMMAND_MAX_LENGTH)
The later constant is defined in B(src/config.h.in)

2(#(COMMANDLINE OPTIONS))

PRE(
$ winefish -h
winefish 1.3.2.6 LaTeX editor
Usage: winefish B(options) B(filenames ...)
Currently accepted options are:
-s           skip root check
-v           current version
-n 0|1       open new window \(1\) or not \(0\)
-p filename  open project
-l B(number)    set lineB(number). Negative value takes no effect.
-h           this help screen
)

2(#(OUTPUTBOX))

When you start a tool, start `Grep Function' \(B(control + meta + F)\),
or start listing your templates \(B(control + meta + shift + F)\),
the results will be shipped out to a Outputbox.

There are some usefull operations with Outputbox:
L(
* GREEN(single-click:) open file at specified line
* GREEN(right-click:) create a popup menu
* GREEN(control + click:) clone file \(create a new file with the same contents\)
)

2(#(TEMPLATES SUPPORT))

Go to B(Preferences Pages / Miscellaneous) and specify the directory
which contains your templates. By default, it is B($HOME/tex/templates).

The template file is of type *.tex or *.sty.
Each template *MUST* contains the  patterns B(\%\%wf=). 
This helps you writing description for templates. For e.g.,
PRE(
\%\%wf=this is template file
\%\%wf=this is the description of template
\documentclass{article}
...
)
To U(list all your template files), press B(control + meta + shift + F).
Then press B(control + click) to create a clone file \(See @[OUTPUTBOX](#OUTPUTBOX)\)

Winefish doesnot clean up the B(\%\%wf=) string automatically.

2(#(BRACE FINDER))

If your editor cursor is placed beside a GREEN(brace)
\( B(RED($)), B(RED(\()), B(RED(\))), B(RED({)), B(RED(})), B(RED([)), B(RED(])) \),
you may want to find the matching one. Just press
B(control + ]) \(forward\) or B(control + [) \(backward\). Below the rules:

L(
* escaped characters will be ignored
* characters in comment line will be ignored
* for $, B(control + ]) starts I(forward)-finding the matched $.
* for $, B(control + [) starts I(backward)-finding the matched $.
* for other braces:
L(
* I(forward): start finding the matching for current brace.
* I(backward): L(*if the characters on the left hand is a brace too,
start finding the matching for it; *otherwise, treat as I(forward).)
))

2(#(TIPS))

L(
* Press B(shift + control + Escape) to hide/show the Sidebar.
* Press B(shift + Escape) to hide/show the Outputbox.
* Press B(control + I) to insert an image.
* B(Doubleclick) on an image in the file browsers.
)

2(#(LOCALE SUPPORT))

There are English, French, Italian and Vietnamese. Here're examples:
PRE(
$ LANG=vi_VN winefish # start winefish with Vietnamese frontend
$ LANG=it_IT winefish # for Italian users
$ LANG=fr_FR winefish # for French users
)

2(#(CONFIGURE))

There're some variables control behavior of Winefish.
You can modify them in the file B(src/config.h.in)
before executing the script `configure'. \(RED(The very last lines.)\)
There're some comment which may help you!

<HR>
This HTML file was generated from RED(winefish.txt) by RED(k2h) program.\\
RED($Id$)
<HR>
</BODY>
</HEAD>
